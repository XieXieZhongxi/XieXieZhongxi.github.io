---
title:  "IOS多线程GCD"
date:   2015-04-20 17:44:25
categories: [iOS]
tags: [GCD,多线程]
---


1.GCD简介

GCD是苹果开发的一个多核线程的解决方法,GCD和其它的多线程技术方案想比,使用起来更加简单和方便.

2.GCD的简单实现
``` ruby
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        //进行网络请求数据操作
        dispatch_async(dispatch_get_main_queue(), ^{
            //回到主线程更新UI
        });
    });
```
3.系统提供的dispatch方法

- 后台执行
``` ruby
dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        //you code
    });
```
- 主线程执行
``` ruby
dispatch_async(dispatch_get_main_queue(), ^{
        //you code
    });
```
- 一次性执行
``` ruby
static dispatch_once_t pred;
dispatch_once(&pred, ^{
        //you code
    });
```
- 延迟两秒执行
``` ruby
double delayInSeconds = 2.0;
dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, delayInSeconds * NSEC_PER_SEC);
dispatch_after(popTime, dispatch_get_main_queue(), ^{
        //you code
    });
```

- `dispatch_queue_t`也可以自己定义,如要自定义`queue`,可以用`dispatch_queue_create`方法,示例如下:
``` ruby
dispatch_queue_t urls_queue = dispatch_queue_create("Nelson", NULL);
dispatch_async(urls_queue, ^{
        //you code
    });
```
- 另外,GCD还有一些高级用法,例如让后台两个线程并行执行,然后等两个线程都结束后,再汇总执行结果.这个可以用`dispatch_group_t`丶`dispatch_group_async`和`dispatch_group_notify`来实现,示例如下:
``` ruby
dispatch_group_t group = dispatch_group_create();
dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^{
        //并行执行的线程一
});
dispatch_group_async(group, dispatch_get_global_queue(0, 0), ^{
        //并行执行的线程二
});
dispatch_group_notify(group, dispatch_get_global_queue(0, 0), ^{
        //汇总结果
});
```

4.修改block之外的变量

默认情况下,在程序块中访问的外部变量是复制过来的,即写操作不对原变量生效,但是你可以加上__Block来让其写操作生效,示例代码如下:
``` ruby
__block int a = 0;
void (^foo)(void) = ^{
     a = 1;
};
foo();
//这里,a的值被修改为1
```

5.后台运行

使用Block的另一个用处是可以让成勋在后台较长久地运行.在以前,当应用被按Home键退出后,应用仅有最多5秒钟的时间做一些保存或者倾力资源的工作.但是应用可以调用`UIApplication`的`beginBackgroundTaskWithExpirationHandler`方法,让应用最多有10分钟的时间在后台长久运行,这个时间可以用来做清理本地缓存丶发送统计数据等工作.
让程序在后台长久运行的示例代码如下:
`AppDelegate.h`
``` ruby
@property (assign , nonatomic) UIBackgroundTaskIdentifier backgroundUpdateTask;
```
`AppDelegate.m`
``` ruby
-(void)applicationDidEnterBackground:(UIApplication *)application 
{
    [self beingBackgroundUpdateTask];
    //在这里加上你需要长久运行的代码
    [self endBackgroundUpdateTask];
}

-(void)beingBackgroundUpdateTask
{
    self.backgroundUpdateTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{
        [self endBackgroundUpdateTask];
    }];
}
-(void)endBackgroundUpdateTask
{
    [[UIApplication sharedApplication] endBackgroundTask:self.backgroundUpdateTask];
    self.backgroundUpdateTask = UIBackgroundTaskInvalid;
}
```
6.总结

总体来说,GCD能够极大地方便开发者进行多线程编程,大家应该尽量使用GCD来处理后台线程和UI线程的交互

---
End.
